v2:~"v"(package @fx ~(import @layout-functions) ~(import @style-functions) ~(import @animation-functions) ~(bind @split-horiz-four-times &" base split-amount#|v"(~(let @pct-string &" n%|v"(~(to-string ~(to-integer ~(::ti:: %100 @n))))) ~(let @get-letter-part &" top1% top2% bottom1% bottom2%|v"(~"v"(style:with-style-set-to @base $"clip-path" ~"v"(string-cat $"polygon(" ~(pct-string @top1) $"% 0%, " ~(pct-string @top2) $"% 0%, " ~(pct-string @bottom2) $"% 100%, " ~(pct-string @bottom1) $"% 100%)")))) ~(let @shift-right-by &" nex amt#|v"(~"v"(style:with-style-set-to ~"v"(style:with-style-set-to @nex $"position" $"relative") $"left" ~(string-cat ~(to-string @amt) $"px")))) ~"v"(cons ~(get-letter-part %0 %0.25 %0 %0.25) ~"v"(cons ~"v"(shift-right-by ~(get-letter-part %0.25 %0.5 %0.25 %0.5) @split-amount) ~"v"(cons ~"v"(shift-right-by ~(get-letter-part %0.5 %0.75 %0.5 %0.75) ~(::ti:: #2 @split-amount)) ~"v"(cons ~"v"(shift-right-by ~(get-letter-part %0.75 %1 %0.75 %1) ~(::ti:: #3 @split-amount)) ~(make-zlist))))))) ~(bind @split-letter-vert &" base-letter split-distance#|v"(~(let @left-point ~(to-integer ~(::ti:: %100 ~(random)))) ~(let @right-point ~(to-integer ~(::ti:: %100 ~(random)))) ~(let @placeholder-letter ~"v"(style:with-hidden ~(style:with-top-padding-of @base-letter @split-distance))) ~(let @top-letter ~"v"(style:with-style-set-to @base-letter $"clip-path" ~(string-cat $"polygon(0% 0%, 100% 0%, 100% " ~(to-string @right-point) $"%, 0% " ~(to-string @left-point) $"%, 0% 0%)"))) ~(let @bottom-letter ~"v"(style:with-style-set-to ~"v"(style:with-style-set-to ~"v"(style:with-style-set-to @base-letter $"clip-path" ~(string-cat $"polygon(0% 100%, 0% " ~(to-string @left-point) $"%, 100% " ~(to-string @right-point) $"%, 100% 100%)")) $"position" $"relative") $"top" ~(string-cat ~(to-string @split-distance) $"px"))) ~(cons @top-letter ~(cons @bottom-letter ~(cons @placeholder-letter ~(make-zlist)))))) ~(bind @split-letter-horiz &" base-letter split-distance#|v"(~(let @top-point ~(to-integer ~(::ti:: %100 ~(random)))) ~(let @bottom-point ~(to-integer ~(::ti:: %100 ~(random)))) ~(let @placeholder-letter ~"v"(style:with-hidden ~(style:with-left-padding-of @base-letter @split-distance))) ~(let @left-letter ~"v"(style:with-style-set-to @base-letter $"clip-path" ~(string-cat $"polygon(0% 0%, " ~(to-string @top-point) $"% 0%, " ~(to-string @bottom-point) $"% 100%, 0% 100%)"))) ~(let @right-letter ~"v"(style:with-style-set-to ~"v"(style:with-style-set-to ~"v"(style:with-style-set-to @base-letter $"clip-path" ~(string-cat $"polygon(" ~(to-string @top-point) $"% 0%, 100% 0%, 100% 100%, " ~(to-string @bottom-point) $"% 100%)")) $"position" $"relative") $"left" ~(string-cat ~(to-string @split-distance) $"px"))) ~(cons @left-letter ~(cons @right-letter ~(cons @placeholder-letter ~(make-zlist)))))) ~(bind @theads &" doc|v"(~"v"(layout:justify-doc-to-width-in-format @doc #790 &" line|v"(~(style:with-light-weight ~(style:with-font ~(style:uppercased @line) $"Helvetica")))))) ~(bind @flippyletters &" doc|v"(~"v"(layout:do-for-each-letter-or-separator-in &" letter|v"(~"v"(animation:do-on-every &" previous|v"(~"v"(style:with-background-color-of ~"v"(style:with-text-in-color @letter ~(animation:random-color-in-hsv-ranges %0.0 %1 %0.75 %1 %0.6 %1)) ~(animation:random-color-in-hsv-ranges %0.0 %1 %0.75 %1 %0.0 %0.4))) @letter ~(animation:fudge-interval #100))) ~(theads @doc)))) ~(bind @dutchdoors &" doc|v"(~"v"(layout:do-for-each-letter-or-separator-in &" letter|v"(~(let @w ~(get-pixel-width @letter)) ~(let @h ~(get-pixel-height @letter)) ~(let @color1 ~(animation:random-color)) ~(let @color2 ~(animation:random-color)) ~(let @color3 ~(animation:random-color)) ~(let @color4 ~(animation:random-color)) ~(let @pct ~(random)) ~(let @backletter ~"v"(style:with-background-color-of ~(style:with-text-in-color @letter @color1) @color2)) ~(let @frontletter ~(style:with-clip-percent ~"v"(style:with-background-color-of ~(style:with-text-in-color @letter @color3) @color4) @pct %0.0 %0.0 %0.0)) ~(cons @backletter ~(cons @frontletter ~(style:with-height-of ~(style:with-width-of ~(make-zlist) @w) @h)))) @doc))))