v2:~"v"(package @layout ~(import @util-functions) ~(import @style-functions) ~(bind @scale-to-pixel-width &" n width|v"(~(let @defaultsize #50) ~(let @infont ~(style:with-text-in-size @n @defaultsize)) ~(let @widthindefaultfont ~(get-pixel-width @infont)) ~(let @heightindefaultfont ~(get-pixel-height @infont)) ~(let @ratio ~(::ov:: ~(to-float @width) ~(to-float @widthindefaultfont))) ~(let @containerheight ~(::ti:: @ratio ~(to-float @heightindefaultfont))) ~"v"(cons ~(style:with-transform-origin-x-y ~(style:with-scale @infont @ratio) %0.0 %0.0) ~(style:with-height-of [line]() @containerheight)))) ~(bind @justify-doc-to-width-in-format-by-line &" doc sizelimit format|v"(~"v"(map-with @doc &" line|v"(~(let @formattedline ~(format @line)) ~(let @widthat50 ~(get-pixel-width ~(style:with-text-in-size @formattedline #50))) ~(let @desiredpixelsize ~(to-integer ~(::ti:: %50 ~(::ov:: ~(to-float @sizelimit) @widthat50)))) ~(style:with-text-in-size @formattedline @desiredpixelsize))))) ~(bind @justify-doc-to-width-in-format &" doc sizelimit format|v"(~"v"(map-with @doc &" line|v"(~(let @formattedline ~(do-for-each-letter-or-separator-in &" letter|v"(~(format @letter)) @line)) ~(let @widthat50 ~(get-pixel-width ~(style:with-text-in-size @formattedline #50))) ~(let @desiredpixelsize ~(to-integer ~(::ti:: %50 ~(::ov:: ~(to-float @sizelimit) @widthat50)))) ~(do-for-each-letter-or-separator-in &" letter|v"(~"v"(style:with-text-in-size @letter @desiredpixelsize)) @formattedline))))) ~(bind @doc-with-contents-of &" lst|v"(~(util:put-contents-in @lst [doc]()))) ~(bind @with-only-words &" lst|v"(~(util:with-only-items-satisfying @lst @is-word))) ~(bind @combine-lines &" doc|v"(~"v"(if ~(is-empty @doc) [line]() ~(util:list-cat ~(car @doc) ~(combine-lines ~(cdr @doc)))))) ~(bind @flatten-lines &" doc|v"(~"v"(map @doc &" line|v"(~(util:flatten @line))))) ~(bind @do-for-each-line-in &" f doc|v"(~"v"(util:traverse-items-satisfying-and-do @doc &" n|v"(~(is-line @n)) @f))) ~(bind @do-for-each-word-in &" f doc|v"(~"v"(util:traverse-items-satisfying-and-do @doc &" n|v"(~(is-word @n)) @f))) ~(bind @do-for-each-letter-in &" f doc|v"(~"v"(util:traverse-items-satisfying-and-do @doc &" n|v"(~(is-letter @n)) @f))) ~(bind @do-for-each-letter-or-separator-in &" f doc|v"(~"v"(util:traverse-items-satisfying-and-do @doc &" n|v"(~"v"(or ~(is-letter @n) ~(is-separator @n))) @f))) ~(bind @do-for-each-expectation-in &" f doc|v"(~"v"(util:traverse-items-satisfying-and-do @doc &" n|v"(~(is-expectation @n)) @f))) ~(bind @top-mask-nex-by &" n amount|v"(~(let @nexheight ~(get-pixel-height @n)) ~(let @nexwidth ~(get-pixel-width @n)) ~(let @maskheight ~(::ti:: @amount @nexheight)) ~(cons @n ~(style:clips-contents ~(style:with-width-of ~(style:with-height-of [word]() @maskheight) @nexwidth))))))