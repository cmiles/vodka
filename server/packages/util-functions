v2:~"v"(package @util ~(bind @LOG [doc]()) ~(bind @log &"() nex|v"(~(cram ~(copy @nex) @LOG))) ~(bind @caar &" lst()|v"(~(car ~(car @lst)))) ~(bind @cadr &" lst()|v"(~(car ~(cdr @lst)))) ~(bind @cdar &" lst()|v"(~(cdr ~(car @lst)))) ~(bind @cddr &" lst()|v"(~(cdr ~(cdr @lst)))) ~(bind @process &"() list()|v"(~"v"(util:traverse-items-satisfying-and-do @list &"! item|v"(~(is-command @item)) &" item~|v"(~(eval @item))))) ~(bind @range-from-to &"() start# end#|v"(~"v"(if ~(::gt:: @start @end) [word]() ~(cons @start ~(range-from-to ~(::pl:: @start #1) @end))))) ~(bind @reverse &"() lst()|v"(~"v"(reduce-with-starting @lst &" item accum()|v"(~(cons @item @accum)) [word]()))) ~(bind @traverse-atoms-of-and-do &" lst() f&|v"(~"v"(if ~(is-empty @lst) @lst ~"v"(begin ~(let @item ~(car @lst)) ~"v"(if ~(is-list @item) ~(cons ~(traverse-atoms-of-and-do @item @f) ~(traverse-atoms-of-and-do ~(cdr @lst) @f)) ~(cons ~(f @item) ~(traverse-atoms-of-and-do ~(cdr @lst) @f))))))) ~(bind @traverse-items-satisfying-and-do &" lst() testf& dof&|v"(~"v"(if ~(is-empty @lst) @lst ~"v"(begin ~(let @item ~(car @lst)) ~"v"(if ~(testf @item) ~"v"(cons ~(dof @item) ~(traverse-items-satisfying-and-do ~(cdr @lst) @testf @dof)) ~"v"(if ~(is-list @item) ~"v"(cons ~(traverse-items-satisfying-and-do @item @testf @dof) ~(traverse-items-satisfying-and-do ~(cdr @lst) @testf @dof)) ~"v"(cons @item ~(traverse-items-satisfying-and-do ~(cdr @lst) @testf @dof)))))))) ~(bind @nth-from &" n# lst()|v"(~"v"(if ~(::eq:: @n #0) ~(car @lst) ~(nth-from ~(- @n #1) ~(cdr @lst))))) ~(bind @length-of &"# lst()|v"(~"v"(reduce-with-starting @lst &" item accum#|v"(~(::pl:: @accum #1)) #0))) ~(bind @list-cat &"() lst1() lst2()|v"(~"v"(if ~(is-empty @lst1) ~(copy @lst2) ~(cons ~(car @lst1) ~(list-cat ~(cdr @lst1) @lst2))))) ~(bind @put-contents-in &"() lst() dstlst()|v"(~(list-cat @lst @dstlst))) ~(bind @contains-item-satisfying &"! lst() f&|v"(~"v"(reduce-with-starting @lst &" item accum()|v"(~"v"(if ~(f @item) !yes @accum)) !no))) ~(bind @with-only-items-satisfying &"() lst() f&|v"(~"v"(if ~(is-empty @lst) @lst ~"v"(begin ~(let @item ~(car @lst)) ~"v"(if ~(f @item) ~(cons @item ~(with-only-items-satisfying ~(cdr @lst) @f)) ~(with-only-items-satisfying ~(cdr @lst) @f)))))) ~(bind @lookup-key-in &" key table()|v"(~(let @reclookup &" temptable()|v"(~"v"(if ~(is-empty @temptable) ^ ~"v"(if ~(equal @key ~(caar @temptable)) ~(cadr ~(car @temptable)) ~(reclookup ~(cdr @temptable)))))) ~(reclookup @table))) ~(bind @remove-all-entries-with-key-from &"() key table()|v"(~"v"(reduce-with-starting @table &" item accum()|v"(~"v"(if ~(equal @key ~(car @item)) @accum ~(cons @item @accum))) [word]()))) ~(bind @add-key-value-to &" key value table()|v"(~(cons ~(cons @key ~(cons @value [word]())) @table))) ~(bind @key-is-in &"! key table()|v"(~(contains-item-satisfying @table &" entry|v"(~(equal @key ~(car @entry)))))))