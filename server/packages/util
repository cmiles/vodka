v2:~"v"(package @util ~(bind @move-contents-to-doc &" lst|v"(~"v"(if ~(is-empty @lst) [doc]() ~(cons ~(car @lst) ~(move-contents-to-doc ~(cdr @lst)))))) ~(bind @words-only &" lst|v"(~"v"(if ~(is-empty @lst) [line]() ~"v"(if ~(is-word ~(car @lst)) ~(cons ~(car @lst) ~(words-only ~(cdr @lst))) ~(words-only ~(cdr @lst)))))) ~(bind @combine-lines &" doc|v"(~"v"(if ~(is-empty @doc) [line]() ~"v"(begin ~(let @firstline ~(car @doc)) ~"v"(if ~(is-empty @firstline) ~"v"(begin ~(combine-lines ~(cdr @doc))) ~"v"(begin ~(let @firstword ~(car @firstline)) ~(let @firstline-minus-firstword ~(cdr @firstline)) ~(let @doc-minus-firstline ~(cdr @doc)) ~(let @newdoc ~(cons @firstline-minus-firstword @doc-minus-firstline)) ~(cons @firstword ~(combine-lines @newdoc)))))))) ~(bind @LOG [doc]()) ~(bind @log &" nex|v"(~(cram ~(copy @nex) @LOG))) ~(bind @caar &" lst|v"(~(car ~(car @lst)))) ~(bind @cadr &" lst|v"(~(car ~(cdr @lst)))) ~(bind @cdar &" lst|v"(~(cdr ~(car @lst)))) ~(bind @cddr &" lst|v"(~(cdr ~(cdr @lst)))) ~(bind @do-for-each &" f lst|v"(~(do-for-each-and-put-in @f @lst [word]()))) ~(bind @do-for-each-and-put-in &" f lst dstlst|v"(~"v"(if ~(is-empty @lst) @dstlst ~(cons ~(@f ~(car @lst)) ~(do-for-each-and-put-in @f ~(cdr @lst) @dstlst))))) ~(bind @range &" start end|v"(~"v"(if ~(::gt:: @start @end) [word]() ~(cons @start ~(range ~(::pl:: @start #1) @end))))) ~(bind @lookup &" nex table|v"(~(let @r ^) ~(do-for-each &" entry|v"(~(let @key ~(car @entry)) ~"v"(if ~(equal @key @nex) ~(set @r ~(car ~(cdr @entry))) ^)) @table) @r)) ~(bind @flatten &" lst-to-flatten|v"(~(let @remove-leading-empty-lists &" lst|v"(~"v"(if ~(is-empty @lst) @lst ~"v"(begin ~(let @t ~(car @lst)) [line]([word]([letter]"t"() [letter]"h"() [letter]"i"() [letter]"s"()) [letter]" "() [word]([letter]"i"() [letter]"s"()) [letter]" "() [word]([letter]"a"() [letter]"n"() [letter]"n"() [letter]"o"() [letter]"y"() [letter]"i"() [letter]"n"() [letter]"g"()) [letter]","() [letter]" "() [word]([letter]"I"()) [letter]" "() [word]([letter]"n"() [letter]"e"() [letter]"e"() [letter]"d"()) [letter]" "() [word]([letter]"s"() [letter]"h"() [letter]"o"() [letter]"r"() [letter]"t"()) [letter]" "() [word]([letter]"c"() [letter]"i"() [letter]"r"() [letter]"c"() [letter]"u"() [letter]"i"() [letter]"t"()) [letter]" "() [word]([letter]"e"() [letter]"v"() [letter]"a"() [letter]"l"())) ~"v"(if ~(is-list @t) ~"v"(if ~(is-empty @t) ~(remove-leading-empty-lists ~(cdr @lst)) @lst) @lst))))) ~(let @do-flatten &" lst|v"(~(let @usable-lst ~(remove-leading-empty-lists @lst)) ~"v"(if ~(is-empty @usable-lst) [word]() ~"v"(begin ~(let @first ~(car @usable-lst)) ~"v"(if ~(is-list @first) ~(do-flatten ~(cons ~(car @first) ~(cons ~(cdr @first) ~(cdr @usable-lst)))) ~(cons @first ~(do-flatten ~(cdr @usable-lst)))))))) ~(do-flatten @lst-to-flatten))) ~(bind @select-nth-from-list &" n lst|v"(~"v"(if ~(::eq:: @n #0) ~(car @lst) ~(select-nth-from-list ~(- @n #1) ~(cdr @lst))))) ~(bind @list-length &" lst|v"(~"v"(if ~(is-empty @lst) #0 ~(::pl:: #1 ~(list-length ~(cdr @lst)))))))