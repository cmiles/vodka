v2:~(|package @animation ~(_import @style-functions_) ~(_import @util-functions_) ~(_bind @FPS #20_) ~(_bind @flicker &"* nex"(|~(|do-on-every &" n"(|~(_let @r ~(_random _)_) ~(_let @opacity ~(|if ~(_::gt:: @r %0.45_) %1 ~(|if ~(_::gt:: @r %0.15_) %0.75 %0.2|)|)_) ~(_style:with-alpha-of @n @opacity_)|) @nex #100|)|)_) ~(_bind @reactivate-nested-animations &"() list()"(|~(|util:traverse-nexes-satisfying-and-do @list &"! item"(|~(_is-expectation @item_)|) &"* item*"(|@item|)|)|)_) ~(_bind @do-on-every &"* f& nex interval#"(|~(_let @exp ~(_cons @nex *(__)_)_) ~(_set-delay ~(_ff-with @exp &" n"(|~(_reset @exp_) ~(_f @n_)|)_) @interval_)|)_) ~(_bind @do-on-every-with-param &"* f& nex interval#"(|~(_let @p #0_) ~(_let @exp ~(_cons @nex *(__)_)_) ~(_set-delay ~(_ff-with @exp &" n"(|~(_reset @exp_) ~(_set @p ~(_::pl:: @p #1_)_) ~(_f @nex @p_)|)_) @interval_)|)_) ~(_bind @do-on-every-for &"* f& nex interval# iterations#"(|~(_let @its #0_) ~(_let @exp ~(_cons @nex *(__)_)_) ~(_set-delay ~(_ff-with @exp &" n"(|~(_set @its ~(_::pl:: @its #1_)_) ~(|if ~(_::lt:: @its @iterations_) ~(_reset @exp_) ^|) ~(_f @n_)|)_) @interval_)|)_) ~(_bind @animate-with-for-duration-of &"* nex animatefunc& duration%"(|~(_let @delay-ms ~(_to-integer ~(_::ov:: %1000 @FPS_)_)_) ~(_let @num-frames ~(_::ti:: @duration @FPS_)_) ~(_let @increment ~(_::ov:: %1 @num-frames_)_) ~(_let @val %0_) ~(_do-on-every-for &" n"(|~(_set @val ~(_::pl:: @val @increment_)_) ~(_animatefunc @n @val_)|) @nex @delay-ms ~(_to-integer @num-frames_)_)|)_) ~(_bind @loop &" exp-generator&"(|~(|ff-with ~(_make-expectation ~(_exp-generator _)_) &" n"(|~(_eval ~(_exp-generator _)_)|)|)|)_) ~(_bind @fade-in-for-seconds &"* nex duration%"(|~(|animate-with-for-duration-of ~(_style:with-alpha-of @nex %0_) &" nex val"(|~(_style:with-alpha-of @nex @val_)|) @duration|)|)_) ~(_bind @seq &" exps*..."(|~(|ff-with ~(_make-expectation ^_) &" exp"(|~(|if ~(_is-empty @exps_) @exp ~(|begin ~(_let @r ~(_car @exps_)_) ~(_set @exps ~(_cdr @exps_)_) @r|)|)|)|)|)_) ~(_bind @fade-out-for-seconds &"* nex duration%"(|~(|animate-with-for-duration-of ~(_style:with-alpha-of @nex %1_) &" nex val"(|~(_style:with-alpha-of @nex ~(_- %1 @val_)_)|) @duration|)|)_) ~(_bind @hold-for-seconds &"* nex duration%"(|~(_set-delay ~(_make-expectation @nex_) ~(_to-integer ~(_::ti:: @duration %1000_)_)_)|)_) ~(_bind @vertical-wipe &" nex newfgcolor$ newbgcolor$"(|~(_let @nexheight ~(_get-pixel-height @nex_)_) ~(_let @nexwidth ~(_get-pixel-width @nex_)_) ~(_let @container ~(_style:with-height-of ~(_style:with-width-of [word](__) @nexwidth_) @nexheight_)_) ~(_let @newnex ~(|style:with-text-in-color ~(|style:with-background-color-of ~(_copy @nex_) @newbgcolor|) @newfgcolor|)_) ~(_cons @newnex ~(_cons @nex @container_)_)|)_) ~(_bind @top-mask-nex-by &" n amount%"(|~(_let @nexheight ~(_get-pixel-height @n_)_) ~(_let @nexwidth ~(_get-pixel-width @n_)_) ~(_let @maskheight ~(_::ti:: @amount @nexheight_)_) ~(_let @mask ~(|style:with-background-color-of ~(|style:with-height-of ~(_style:with-width-of [word](__) @nexwidth_) @maskheight|) $"#ffffff"|)_) ~(_cons @n ~(_cons @mask ~(_make-zlist _)_)_)|)_) ~(_bind @bottom-mask-nex-by &" n amount%"(|~(_let @nexheight ~(_get-pixel-height @n_)_) ~(_let @nexwidth ~(_get-pixel-width @n_)_) ~(_let @maskheight ~(_::ti:: @amount @nexheight_)_) ~(_let @mask ~(|style:with-y-offset-of ~(|style:with-background-color-of ~(|style:with-height-of ~(_style:with-width-of [word](__) @nexwidth_) @maskheight|) $"#ffffff"|) ~(_- @nexheight @maskheight_)|)_) ~(_cons @n ~(_cons @mask ~(_make-zlist _)_)_)|)_) ~(_bind @fudge-interval &" interval#"(|~(_to-integer ~(_::ti:: ~(_to-float @interval_) ~(_::pl:: %0.9 ~(_::ti:: %0.2 ~(_random _)_)_)_)_)|)_) ~(_bind @random-color &(|~(|string-cat $"rgb(" ~(_to-string ~(_random-from-to #0 #255_)_) $"," ~(_to-string ~(_random-from-to #0 #255_)_) $"," ~(_to-string ~(_random-from-to #0 #255_)_) $")"|)|)_) ~(_bind @random-color-in-hsv-ranges &" huestart#% hueend#% satstart#% satend#% valstart#% valend#%"(|~(|string-cat $"hsl(" ~(_to-string ~(_::ti:: %360 ~(_random-from-to @huestart @hueend_)_)_) $"," ~(_to-string ~(_::ti:: %100 ~(_random-from-to @satstart @satend_)_)_) $"%," ~(_to-string ~(_::ti:: %100 ~(_random-from-to @valstart @valend_)_)_) $"%)"|)|)_) ~(_bind @with-random-x-y &" nex width#% height#%"(|~(_let @x ~(_random-from-to #0 @width_)_) ~(_let @y ~(_random-from-to #0 @height_)_) ~(_style:with-left-padding-of ~(_style:with-top-padding-of @nex @y_) @x_)|)_) ~(_bind @random-from-to &" start#% end#%"(|~(_let @rand ~(_::ti:: ~(_random _) ~(_- ~(_to-float @end_) ~(_to-float @start_)_)_)_) ~(|if ~(_or ~(_is-float @start_) ~(_is-float @end_)_) ~(_::pl:: @start @rand_) ~(_::pl:: @start ~(_to-integer @rand_)_)|)|)_) ~(_bind @cycle-every &" list() interval#"(|~(_let @len ~(_util:length-of @list_)_) ~(_do-on-every-with-param &" n p"(|~(_let @index ~(_modulo @p @len_)_) ~(_util:nth-from @index @list_)|) ~(_car @list_) @interval_)|)_) ~(_bind @fade-between &"* thing1 thing2 fadetime% holdtime%"(|~(_loop &(_~(|seq ~(_fade-in-for-seconds @thing1 @fadetime_) ~(_hold-for-seconds @thing1 @holdtime_) ~(_fade-out-for-seconds @thing1 @fadetime_) ~(_fade-in-for-seconds @thing2 @fadetime_) ~(_hold-for-seconds @thing2 @holdtime_) ~(_fade-out-for-seconds @thing2 @fadetime_)|)_)_)|)_) ~(_bind @random-item-from &" lst()"(|~(_let @length ~(_util:length-of @lst_)_) ~(_let @n ~(_to-integer ~(_::ti:: @length ~(_random _)_)_)_) ~(_util:nth-from @n @lst_)|)_)|)