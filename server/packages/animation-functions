v2:~"v"(package @animation ~(import @style-functions) ~(import @util-functions) ~(bind @FPS #20) ~(bind @flicker &"* nex|v"(~"v"(do-on-every &" n|v"(~(let @r ~(random)) ~(let @opacity ~"v"(if ~(::gt:: @r %0.45) %1 ~"v"(if ~(::gt:: @r %0.15) %0.75 %0.2))) ~(style:with-alpha-of @n @opacity)) @nex #100))) ~(bind @reactivate-nested-animations &"() list()|v"(~"v"(util:traverse-items-satisfying-and-do @list &"! item|v"(~(is-expectation @item)) &"* item*|v"(@item)))) ~(bind @do-on-every &"* f& nex interval#|v"(~(let @exp ~(cons @nex *())) ~(set-delay ~(ff-with @exp &" n|v"(~(reset @exp) ~(f @n))) @interval))) ~(bind @do-on-every-with-param &"* f& nex interval#|v"(~(let @p #0) ~(let @exp ~(cons @nex *())) ~(set-delay ~(ff-with @exp &" n|v"(~(reset @exp) ~(set @p ~(::pl:: @p #1)) ~(f @nex @p))) @interval))) ~(bind @do-on-every-for &"* f& nex interval# iterations#|v"(~(let @its #0) ~(let @exp ~(cons @nex *())) ~(set-delay ~(ff-with @exp &" n|v"(~(set @its ~(::pl:: @its #1)) ~"v"(if ~(::lt:: @its @iterations) ~(reset @exp) ^) ~(f @n))) @interval))) ~(bind @do-on-every-for &"* f& nex interval# iterations#|v"(~(let @its #0) ~(let @make-delay &", n|v"(~(ff-with ~(set-delay ~(make-expectation @n) @interval) @f))) ~"v"(ff-with ~(make-expectation ~(make-delay @nex)) &" nx|v"(~(set @its ~(::pl:: @its #1)) ~"v"(if ~(::lte:: @its @iterations) ~(make-delay ~(car @nx)) ~(car @nx)))))) ~(bind @animate-with-for-duration-of &"* nex animatefunc& duration%|v"(~(let @delay-ms ~(to-integer ~(::ov:: %1000 @FPS))) ~(let @num-frames ~(::ti:: @duration @FPS)) ~(let @increment ~(::ov:: %1 @num-frames)) ~(let @val %0) ~(do-on-every-for &" n|v"(~(set @val ~(::pl:: @val @increment)) ~(animatefunc @n @val)) @nex @delay-ms ~(to-integer @num-frames)))) ~(bind @loop &" exp-generator&|v"(~"v"(ff-with ~(make-expectation ~(exp-generator)) &" n|v"(~(eval ~(exp-generator)))))) ~(bind @fade-in-for-seconds &"* nex duration%|v"(~"v"(animate-with-for-duration-of ~(style:with-alpha-of @nex %0) &" nex val|v"(~(style:with-alpha-of @nex @val)) @duration))) ~(bind @seq &" exps*...|v"(~"v"(ff-with ~(make-expectation ^) &" exp|v"(~"v"(if ~(is-empty @exps) @exp ~"v"(begin ~(let @r ~(car @exps)) ~(set @exps ~(cdr @exps)) @r)))))) ~(bind @fade-out-for-seconds &"* nex duration%|v"(~"v"(animate-with-for-duration-of ~(style:with-alpha-of @nex %1) &" nex val|v"(~(style:with-alpha-of @nex ~(- %1 @val))) @duration))) ~(bind @hold-for-seconds &"* nex duration%|v"(~(set-delay ~(make-expectation @nex) ~(to-integer ~(::ti:: @duration %1000))))) ~(bind @vertical-wipe &" nex newfgcolor$ newbgcolor$|v"(~(let @nexheight ~(get-pixel-height @nex)) ~(let @nexwidth ~(get-pixel-width @nex)) ~(let @container ~(style:with-height-of ~(style:with-width-of [word]() @nexwidth) @nexheight)) ~(let @newnex ~"v"(style:with-text-in-color ~"v"(style:with-background-color-of ~(copy @nex) @newbgcolor) @newfgcolor)) ~(cons @newnex ~(cons @nex @container)))) ~(bind @top-mask-nex-by &" n amount%|v"(~(let @nexheight ~(get-pixel-height @n)) ~(let @nexwidth ~(get-pixel-width @n)) ~(let @maskheight ~(::ti:: @amount @nexheight)) ~(let @mask ~"v"(style:with-background-color-of ~"v"(style:with-height-of ~(style:with-width-of [word]() @nexwidth) @maskheight) $"#ffffff")) ~(cons @n ~(cons @mask ~(make-zlist))))) ~(bind @bottom-mask-nex-by &" n amount%|v"(~(let @nexheight ~(get-pixel-height @n)) ~(let @nexwidth ~(get-pixel-width @n)) ~(let @maskheight ~(::ti:: @amount @nexheight)) ~(let @mask ~"v"(style:with-y-offset-of ~"v"(style:with-background-color-of ~"v"(style:with-height-of ~(style:with-width-of [word]() @nexwidth) @maskheight) $"#ffffff") ~(- @nexheight @maskheight))) ~(cons @n ~(cons @mask ~(make-zlist))))) ~(bind @fudge-interval &" interval#|v"(~(to-integer ~(::ti:: ~(to-float @interval) ~(::pl:: %.9 ~(::ti:: %.2 ~(random))))))) ~(bind @random-color &"|v"(~"v"(string-cat $"rgb(" ~(to-string ~(random-from-to #0 #255)) $"," ~(to-string ~(random-from-to #0 #255)) $"," ~(to-string ~(random-from-to #0 #255)) $")"))) ~(bind @random-color-in-hsv-ranges &" huestart#% hueend#% satstart#% satend#% valstart#% valend#%|v"(~"v"(string-cat $"hsl(" ~(to-string ~(::ti:: %360 ~(random-from-to @huestart @hueend))) $"," ~(to-string ~(::ti:: %100 ~(random-from-to @satstart @satend))) $"%," ~(to-string ~(::ti:: %100 ~(random-from-to @valstart @valend))) $"%)"))) ~(bind @with-random-x-y &" nex width#% height#%|v"(~(let @x ~(random-from-to #0 @width)) ~(let @y ~(random-from-to #0 @height)) ~(style:with-left-padding-of ~(style:with-top-padding-of @nex @y) @x))) ~(bind @random-from-to &" start#% end#%|v"(~(let @rand ~(::ti:: ~(random) ~(- ~(to-float @end) ~(to-float @start)))) ~"v"(if ~(or ~(is-float @start) ~(is-float @end)) @rand ~(to-integer @rand)))) ~(bind @cycle-every &" list() interval#|v"(~(let @len ~(util:length-of @list)) ~(do-on-every-with-param &" n p|v"(~(let @index ~(modulo @p @len)) ~(util:nth-from @index @list)) ~(car @list) @interval))) ~(bind @fade-between &"* thing1 thing2 fadetime% holdtime%|v"(~(loop &(~"v"(seq ~(fade-in-for-seconds @thing1 @fadetime) ~(hold-for-seconds @thing1 @holdtime) ~(fade-out-for-seconds @thing1 @fadetime) ~(fade-in-for-seconds @thing2 @fadetime) ~(hold-for-seconds @thing2 @holdtime) ~(fade-out-for-seconds @thing2 @fadetime)))))) ~(bind @random-item-from &" lst()|v"(~(let @length ~(util:length-of @lst)) ~(let @n ~(to-integer ~(::ti:: @length ~(random)))) ~(util:nth-from @n @lst))))