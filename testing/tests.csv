"actions","copypaste","basic","","","Basic copying and pasting, this test pastes things in non-doc-format which shouuould be allowable.","actions_copypaste_basic","|Shift|H|e|l|l|o|ArrowLeft|Meta|c|v|v|v|Meta|x|ArrowRight|ArrowRight|Shift|Tab|Meta|v|v|v|v| |a|n|d|Shift|Tab|Meta|x|Meta|v|Meta|x|ArrowLeft|Meta|v"
"actions","funnel","bool","deletions","","[none]","actions_funnel_bool_deletions","[none]"
"actions","funnel","bool","newlineatend","","[none]","actions_funnel_bool_newlineatend","[none]"
"actions","funnel","bools","","","[none]","actions_funnel_bools","[none]"
"actions","funnel","command","allowedchars","","[none]","actions_funnel_command_allowedchars","[none]"
"actions","funnel","command","childorsibling","","This test verifies the desired behavior that when you start typing a code object when a codelist type object is selected (either a command or lambda), whether the new code object you are typing is inserted or not depends on whether the codelist has children. In other words: if a command is selected, and the command is empty, if you type a symbol it will be put into the command... but if the command is nonempty, the symbol will be inserted as a sibling next to the selected command (and the same is true for lambdas)","actions_funnel_command_childorsibling","|Shift|~|h|e|l|l|o|Shift|@|w|o|r|l|d|Shift|Tab|Shift|@|w|o|r|l|d|Shift|&|h|e|l|l|o|Shift|@|w|o|r|l|d|Shift|Tab|Shift|@|w|o|r|l|d"
"actions","funnel","command","spaceafter","","[none]","actions_funnel_command_spaceafter","[none]"
"actions","funnel","command","tildeafter","","[none]","actions_funnel_command_tildeafter","[none]"
"actions","funnel","command","typingletters","","this verifies that if you type raw letters inside a command or a lambda, it will show you them normally without weird spacing, and will not insert words for you. inside a command context, you will have to manually create words, or make a line (or doc) and then type inside the line (or doc) and have it create words for you.","actions_funnel_command_typingletters","|Shift|~|Tab|t|y|p|i|n|g| |w|o|r|s|;|s|d|f|;|s|d|f| |;|;|d|f|Shift|Tab|Shift|&|Tab|t|y|p|i| |s|;|s|f|d| |;|s|f|d| |Shift|(|s|d|f| |s|d|Shift|Tab|ArrowUp|Tab|Shift|(|d|f|d|f| |d|d"
"actions","funnel","deletelinebreak","","","[none]","actions_funnel_deletelinebreak","[none]"
"actions","funnel","doc","insertcodeobject","","[none]","actions_funnel_doc_insertcodeobject","[none]"
"actions","funnel","doc","startwithsemi","","[none]","actions_funnel_doc_startwithsemi","[none]"
"actions","funnel","doc","tabinout","","[none]","actions_funnel_doc_tabinout","[none]"
"actions","funnel","doc","typedkey","","[none]","actions_funnel_doc_typedkey","[none]"
"actions","funnel","downarrow","","","[none]","actions_funnel_downarrow","[none]"
"actions","funnel","downarrowpastend","","","[none]","actions_funnel_downarrowpastend","[none]"
"actions","funnel","emptylines","","","[none]","actions_funnel_emptylines","[none]"
"actions","funnel","float","validandinvalidfloats","","just types in some float values, some valid and some invalid, and evalutes them to verify that good floats do nothing/return themselves and bad floats throw errorsUPDATE: you can no longer put in invalid float values, they get automatically corrected to valid values.will keep the test though.","actions_funnel_float_validandinvalidfloats","|Shift|%|1|2|3|.|3|2|Shift|%|3|e|3|Shift|%|2|3|.|.|.|3|2|.|Shift|%|0|0|0|.|0|3|Shift|ArrowDown|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"actions","funnel","insertionpoint","fixliststructure1","","a few tests to make sure that the insertion point doesn't mess things up with standard list structure. 1. an insertion point in a doc, when replaced with a letter, should also insert line and word. 2. in a doc, when replaced with a word, should insert line. 3. in a line, when replaced with a letter, should replace word.  these are not all the combinations. I'm not 100% sold on this behavior but for now I'll lock it down.there will be utility for users to be able to put letters in the ""wrong"" place. but will they need a way to *manually* put letters in the 'wrong' place and if so, is insertion point the way to do this?","actions_funnel_insertionpoint_fixliststructure1","|Shift|~|Tab|Shift|{|Tab|Shift|(|Shift|Tab|Tab|Shift|[|Tab|a|Shift|Tab|Tab|Shift|(|Tab|j|Shift|Tab|Shift|{|Tab|s"
"actions","funnel","integer","endwithzero","","[none]","actions_funnel_integer_endwithzero","[none]"
"actions","funnel","integer","enterinmiddle","","[none]","actions_funnel_integer_enterinmiddle","[none]"
"actions","funnel","integer","evaluate","incomplete","evaluating an incomplete integer (i.e. one where the user hasn't finished typing it out yet) should give an error when shift-enter evaluated in the main repl. there is only one way to get this config currently and that's if it is an integer that's just a negative sign.t his test verifies that the right error is shownUPDATE: we can no longer enter invalid integers - keeping test","actions_funnel_integer_evaluate_incomplete","|Shift|#|-|Shift|Enter"
"actions","funnel","integer","nomoreminuses","","[none]","actions_funnel_integer_nomoreminuses","[none]"
"actions","funnel","integer","startnewletter","","[none]","actions_funnel_integer_startnewletter","[none]"
"actions","funnel","integer","startswithzero","","[none]","actions_funnel_integer_startswithzero","[none]"
"actions","funnel","integer","zeroswithnegatives","","[none]","actions_funnel_integer_zeroswithnegatives","[none]"
"actions","funnel","joinwords","","","[none]","actions_funnel_joinwords","[none]"
"actions","funnel","lambda","basic","","[none]","actions_funnel_lambda_basic","[none]"
"actions","funnel","letter","backspace","","[none]","actions_funnel_letter_backspace","[none]"
"actions","funnel","letter","backspaceincommand","","Saw a bug where deleting the last element inside a command would delete the parent element (the command) if it was a letter. This verifies the correct behavior.","actions_funnel_letter_backspaceincommand","|Shift|~|Tab|h|e|l|l|o|Backspace|Backspace|Backspace|Backspace|Backspace"
"actions","funnel","line","insertnewline","","[none]","actions_funnel_line_insertnewline","[none]"
"actions","funnel","longstring","","","[none]","actions_funnel_longstring","[none]"
"actions","funnel","midseparatorlinebreak","","","[none]","actions_funnel_midseparatorlinebreak","[none]"
"actions","funnel","midwordlinebreak","","","[none]","actions_funnel_midwordlinebreak","[none]"
"actions","funnel","separator","appending","","[none]","actions_funnel_separator_appending","[none]"
"actions","funnel","separator","appendletter","","[none]","actions_funnel_separator_appendletter","[none]"
"actions","funnel","separatorselect","","","[none]","actions_funnel_separatorselect","[none]"
"actions","funnel","shortstring","","","[none]","actions_funnel_shortstring","[none]"
"actions","funnel","symbol","basicops","","[none]","actions_funnel_symbol_basicops","[none]"
"actions","funnel","symbol","deletions","","This test had a mistake in it but accidentally is now testing orgs,even tho this was created before orgs.","actions_funnel_symbol_deletions","[none]"
"actions","funnel","uparrow","","","[none]","actions_funnel_uparrow","[none]"
"actions","funnel","uparrowpastend","","","[none]","actions_funnel_uparrowpastend","[none]"
"actions","funnel","value","downuparrows","","[none]","actions_funnel_value_downuparrows","[none]"
"actions","funnel","word","arrows","","This test types a bunch of random words into a line, separatedby semicolons and spaces etc,then shift-tabs out to the line, then tabs into the first word.then it hits right arrow. Originally hitting right arrow on a wordwould skip separators in between and jump to the next word but I'm deprecatingthat behavior - but will keep this test, just going to reset the golden.","actions_funnel_word_arrows","[none]"
"actions","funnel","word","deletelastword","","[none]","actions_funnel_word_deletelastword","[none]"
"actions","funnel","word","insertionpoint","","tests putting an insertion point into a word, making sure it looks right","actions_funnel_word_insertionpoint","|h|e|l|l|o|Shift|Tab|Shift|(|Tab"
"actions","funnel","word","insertionpointdisappear","","makes sure that the insertion point disappears if user moves away from a word","actions_funnel_word_insertionpointdisappear","|h|e|l|l|o|Shift|Tab|Shift|(|Shift|(|Shift|Tab|Tab|ArrowRight|Tab|ArrowRight|Tab|Shift|Tab"
"actions","funnel","word","joinwordsacrossnewlines","","[none]","actions_funnel_word_joinwordsacrossnewlines","[none]"
"actions","funnel","word","leftarrow","","See comment in actions_funnel_word_arrows.This test is similar but more stuff is in the line besides just words.","actions_funnel_word_leftarrow","[none]"
"actions","funnel","word","newlineatend","","[none]","actions_funnel_word_newlineatend","[none]"
"actions","funnel","zlist","insert","","This tests the basic ability to insert a zlist in the middle of a word., and then append things to the zlist -- we hit lt inside a word to make a zlist, backspace and do it again, this time tab into it, then add two docs, in one doc is an x, the other doc gets a y","actions_funnel_zlist_insert","|Shift|H|e|l|l|o|Shift|<|ArrowLeft|Shift|<|Tab|Shift|{|Shift|X|Shift|Tab|Tab|Tab|Shift|{|Shift|Y"
"actions","misc","basictyping","","","[none]","actions_misc_basictyping","[none]"
"execution","normal","argeval","builtin","toomanyargs","Makes sure that if you pass too many args to a builtin, you get an error.","execution_normal_argeval_builtin_toomanyargs","|Shift|~|-|Shift|#|3|Shift|#|#|#|#|#|Shift|Tab|Shift|Enter"
"execution","normal","lexicalenv","","","Verifies that lambdas capture their lexical environment and use that -- basically first chapter of the SICP book. Defines a lambda that returns a lambda that adds a number to a variable defined in the enclosing scope, then evaluates that returned lambda outside of that scope and verifies it captured that scope etc etc","execution_normal_lexicalenv","|Shift|~|b|i|n|d|Shift| |Tab|Shift|@|s|e|v|e|n|Shift|A|d|d|e|r|Shift|&|Shift| |Tab|Shift|~|b|i|n|d|Shift|@|s|e|v|e|n|Shift|#|7|Shift|Tab|Shift|&|Shift| |n|Shift|~|Shift|+|Shift|@|s|e|v|e|n|Shift|@|n|Shift|Tab|Tab|Tab|Tab|Shift|Enter|Shift|~|Shift|~|s|e|v|e|n|Shift|A|d|d|e|r|ArrowRight|Shift|#|3|Shift|Tab|Shift|Enter"
"functions","async","copy","exp","","Tests the copy-exp builtin, which basically just makes it so you can actually use an exp literal in a function. This is not ideal really.","functions_async_copy_exp","|Shift|~|b|i|n|d|Shift|@|f|Shift|&|Enter|Shift| |Shift|~|s|e|t|-|d|e|l|a|y|Tab|Shift|~|m|a|k|e|Backspace|Backspace|Backspace|Backspace|c|o|p|y|-|e|x|p|Tab|Shift|*|Shift|Tab|Shift|#|1|0|0|0|Shift|Tab|Tab|Tab|Shift|Enter|Shift|~|f|ArrowRight|Shift|~|f|Enter|ArrowLeft|Enter"
"functions","async","ffwith","withdelay","","tests ffwith with a set-delay","functions_async_ffwith_withdelay","|Shift|~|s|e|t|-|d|e|l|a|y|Tab|Shift|~|f|f|-|w|i|t|h|Tab|Shift|*|Tab|Shift|#|3|Shift|Tab|Shift|&| |n|Enter|Shift|~|Shift|+|Shift|@|n|Shift|#|1|0|0|Shift|Tab|Tab|Tab|Shift|#|1|0|0|0|Shift|Tab|Enter"
"functions","async","ffwith","","","tests ff-with with no accompanying delay - also incidentally tests the fact that if an expectation that hasn't been set is activated, it will directly invoke ff-with.","functions_async_ffwith","|Shift|~|f|f|-|w|i|t|h|Tab|Shift|*|Tab|Shift|#|3|Shift|Tab|Shift|&| |n|Enter|Shift|~|Shift|+|Shift|@|n|Shift|#|1|0|0|Shift|Tab|Tab|Tab|Enter"
"functions","basic","bind","returnssymbol","","Verifies that when you bind a symbol to a value, the thing that is returned by ""bind"" is the symbol, not the value. This is important because if you return the value, it can be edited, which changes what the symbol is bound to.","functions_basic_bind_returnssymbol","|Shift|~|b|i|n|d|Shift|@|a|Shift|#|4|Shift|Tab|Shift|Enter"
"functions","basic","bind","tointeger","","Binds (non-uniquely) the number 3 to the symbol 'pi' then evaluates the symbol 'pi' 3 times to verify that simple binding works and that you get multiple copies when you non-uniquely bind","functions_basic_bind_tointeger","|Shift|~|b|i|n|d|Tab|Shift|@|a|Backspace|p|i|Shift|#|3|Shift|Tab|Shift|Enter|Shift|@|p|i|Shift|Enter|Shift|@|p|i|Shift|Enter|Shift|@|p|i|Shift|Enter"
"functions","basic","car","","","This test just evaluates a 'car' command that grabs the first letter of a word.","functions_basic_car","|Shift|~|c|a|r|Tab|Shift|(|a|p|p|l|e|Shift|Tab|Tab|Shift|Enter"
"functions","basic","cdr","","","just a basic test of cdr, verifies that cdring the list (apple) results in (pple)","functions_basic_cdr","|Shift|~|c|d|r|Tab|Shift|(|a|p|p|l|e|Shift|Tab|Tab|Shift|Enter"
"functions","basic","cons","","","This is just a basic test for the cons primitive that puts an a inside a word that has ""bcd"" in it.","functions_basic_cons","[none]"
"functions","basic","isempty","","","basic test for is-empty primitive, testing with both empty and nonempty lists","functions_basic_isempty","|Shift|~|i|s|-|e|m|p|t|y|Shift|(|Shift|Tab|Shift|~|i|s|-|e|m|p|t|y|Shift|(|a|Shift|Tab|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","basic","set","","","basic test of the ""set"" primitive. I have a command with nothing in it but a lambda. Inside the lambda I use let to make @a = 10. then I let @b be equal to a lambda that sets @a to 100. then I execute the lambda b in a command. then I return a. executing that whole thing returns 100, because the set command was able to set the value of @a in the outer scope.","functions_basic_set","|Shift|~|Shift|&|Shift| |Shift|~|l|e|t|Shift|@|a|Shift|#|1|0|Shift|Tab|Shift|~|l|e|t|Shift|@|b|Shift|&|Shift| |Shift|~|e|Backspace|s|e|t|Shift|@|a|Shift|#|1|0|0|Shift|Tab|Tab|Tab|Shift|~|b|ArrowRight|Shift|@|a|Shift|Tab|Tab|Shift|Enter"
"functions","conversion","tointeger","","","test of the to-integer function. we do 1. int to int 2. floats to int, with different rounding 3. bool to int, both 4. string to int, successful and failed 5. letter to int, successful and fail 6. word to int, successful and fail. 7. unsupported type (nil) to int, should fail","functions_conversion_tointeger","|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|#|3|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|%|5|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|%|5|.|9|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|%|5|.|1|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|e|Backspace|t|e|g|e|r|Shift|!|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|!|y|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|$|Shift|Enter|4|3|2|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|$|Shift|Enter|d|f|e|f|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Tab|e|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Tab|4|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Tab|Shift|(|2|3|2|Shift|Tab|Shift|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|(|h|e|l|l|o|Shift|Tab|Tab|Shift|Enter|Shift|~|t|o|-|i|n|t|e|g|e|r|Shift|^|Shift|Tab|Shift|Enter"
"functions","conversion","tostring","","","Tests all the conversions from other things to strings: bools, floats, ints, letters, words, lines, and docs.~to-string!shift-tab~to-string~backspace!yshift-tab~to-string%45.45shift-tab~to-string#323shift-tab~to-stringtabj~to-string(helloshift-tab x2~to-string[hello thereshift-tab x3~to-string{hello thereenterpeopleshift-tab x4arrow-up x7shift-enter-arrowdown x7 (shift-enter, THEN arrowdown)shift-enter","functions_conversion_tostring","|Shift|~|t|o|-|s|t|r|i|n|g|Shift|!|Shift|Tab|Shift|~|t|o|-|s|t|r|i|n|g|Shift|~|Backspace|Shift|!|y|Shift|Tab|Shift|~|t|o|-|s|t|r|i|n|g|Shift|%|4|5|.|4|5|Shift|Tab|Shift|~|t|o|-|s|t|r|i|n|g|Shift|#|3|2|3|Shift|Tab|Shift|~|t|o|-|s|t|r|i|n|g|Tab|j|Shift|~|t|o|-|s|t|r|i|n|g|Shift|(|h|e|l|l|o|Shift|Tab|Tab|Shift|~|t|o|-|s|t|r|i|n|g|[|h|e|l|l|o| |t|h|e|r|e|Shift|Tab|Tab|Tab|Shift|~|t|o|-|s|t|r|i|n|g|Shift|{|h|e|l|l|o| |t|h|e|r|e|Enter|p|e|o|p|l|e|Shift|Tab|Tab|Tab|Tab|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","copypaste","retainstyle","","","Makes sure that when you copy and paste something, it retains whatever css styles have been set.","functions_copypaste_retainstyle","|Shift|~|a|p|p|l|y|-|s|t|y|l|e|-|t|o|Shift|$|Shift|Enter|f|o|n|t|-|s|t|y|l|e|Shift|:|i|t|a|l|i|c|;|Tab|Enter|Shift|(|w|o|r|d|Shift|Tab|Tab|Shift|Enter|Meta|c|v|v"
"functions","execution","lambda","noargs","","This test tests the basic function of what command does when you don't have command text. It's supposed to expect the first arg to be a lambda, and execute it. in this case we test it with a valid lambda, which returns 3, and we test it again with something that's not a lambda, which returns error. incidentally ends up being a minimal test for lambda itself as well.","functions_execution_lambda_noargs","|Shift|~|Tab|Shift|&|Tab|Shift|#|3|Shift|Tab|Tab|Shift|~|Tab|Shift|&|Backspace|Tab|Shift|#|3|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","execution","lambda","twoargs","","This is a basic test that just executes a simple two-param lambda ias the first argument of a command. the lambda just adds together two numbers.","functions_execution_lambda_twoargs","|Shift|~|Tab|Shift|&| |a| |b|Tab|Shift|~|Shift|+|Tab|Shift|@|a|Shift|@|b|Shift|Tab|Tab|Shift|#|3|Shift|#|4|Shift|Tab|Shift|Enter"
"functions","general","wrongarg","","","this test just tests the basic functioning of when you pass the wrong arg to a builtin. I do not currently have individual tests for each combination of expected/actual args.","functions_general_wrongarg","|Shift|~|s|t|r|i|n|g|-|l|e|n|g|t|h|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|-|l|e|n|g|t|h|Tab|Shift|$|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","logic","and","","","test all 4 truth table possibilities for logical and","functions_logic_and","|Shift|~|a|n|d|Tab|Shift|!|!|Shift|Tab|Shift|~|a|n|d|Tab|Shift|!|Shift|!|y|Shift|Tab|Shift|~|a|n|d|Tab|Shift|!|y|Shift|!|Shift|Tab|Shift|~|a|n|d|Shift|Tab|Shift|!|y|Shift|!|y|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","logic","if","skipeval","","This test verifies that the if builtin doesn't evaluate the false arg if the predicate is true. It does this by creating a ""die"" function that crashes the engine (via stack overflow) and then puts this in the ""false"" clause of an if expression.","functions_logic_if_skipeval","|Shift|~|b|i|n|d|Shift|@|d|i|e|Shift|&|Shift|~|d|i|e|Shift|Tab|Tab|Shift|Enter|Shift|~|i|f|Shift|~|Backspace|Shift|!|y|Shift|~|Shift|+|Shift|#|2|Shift|#|2|Shift|Tab|Shift|~|d|i|e|Shift|Tab|Shift|Enter"
"functions","logic","if","","","tests both 'if' and 'else' clauses of if statement","functions_logic_if","|Shift|~|i|f|Tab|Shift|!|Shift|#|2|Shift|#|3|Shift|Tab|Shift|~|i|f|Tab|Shift|!|y|Shift|#|3|Shift|#|4|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","logic","not","","","test both positive and negative of negating a bool","functions_logic_not","|Shift|~|n|o|t|Tab|Shift|!|Shift|Tab|Shift|~|n|o|t|Tab|Shift|!|y|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","logic","or","","","test all 4 truth table possibilities for logical or","functions_logic_or","|Shift|~|o|r|Tab|Shift|!|Shift|!|Shift|Tab|Shift|~|o|r|Tab|Shift|!|Shift|!|y|Shift|Tab|Shift|~|o|r|Shift|Tab|Shift|Shift|!|y|Shift|!|Shift|Tab|Shift|~|o|r|Tab|Shift|!|y|Shift|!|y|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","addition","","","Complete test of addition, including mixing types (float and int), multi-arg (3 args), no-arg (should return zero)","functions_math_addition","|Shift|~|Shift|+|Shift|#|3|Shift|Tab|Shift|~|Shift|+|Shift|#|3|Shift|#|5|Shift|Tab|Shift|~|Shift|+|Shift|#|3|Shift|#|5|Shift|#|7|Shift|Tab|Shift|Shift|~|Shift|+|Shift|%|3|.|0|Backspace|3|Shift|%|4|.|4|Shift|Tab|Shift|~|Shift|+|Shift|%|3|.|4|Shift|#|3|Shift|Tab|Shift|+|Backspace|Shift|~|Shift|+|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","division","","","complete test of division (including mixed float and int)","functions_math_division","|Shift|~|6|Backspace|/|Tab|Shift|#|6|Shift|#|3|Shift|Tab|Shift|~|/|Tab|Shift|#|6|Shift|%|1|.|1|Shift|Tab|Shift|~|/|Shift|#|Backspace|Tab|Shift|#|6|.|1|Backspace|Backspace|Backspace|Backspace|Tab|Shift|%|6|.|1|Shift|%|2|.|2|Shift|Tab|Shift|~|/|Shift|Tab|Shift|%|4|.|4|Shift|#|2|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","gtequal","","","greater than or equal to test, just with integers tho","functions_math_gtequal","|Shift|~|Shift|<|=|Shift|#|3|Shift|#|4|Shift|Tab|Shift|~|Shift|<|=|Shift|#|3|Shift|#|3|Shift|Tab|Shift|~|Shift|<|=|Shift|#|3|Shift|#|2|Shift|Tab|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowUp|Shift|ArrowDown|ArrowDown|Shift|Enter"
"functions","math","inequal","","","test for ""does not equal"",just with integers","functions_math_inequal","|Shift|~|Shift|<|>|Shift|#|3|Shift|#|3|Shift|Tab|Shift|~|Shift|<|>|Shift|#|3|Shift|#|4|Shift|Tab|Shift|~|Shift|<|>|Shift|#|3|Shift|#|2|Shift|Tab|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","ltequal","","","less than or equal to test, just with integers","functions_math_ltequal","|Shift|~|Shift|>|=|Shift|#|3|Shift|#|4|Shift|Tab|Shift|~|Shift|>|=|Shift|#|3|Shift|#|3|Shift|Tab|Shift|~|Shift|>|=|Shift|#|3|Shift|#|2|Shift|Tab|ArrowUp|ArrowUp|Shift|Enter|ArrowUp|ArrowDown|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","modulo","","","some basic tests for the modulo operator. javascript behavior for negative modulo is used because idk","functions_math_modulo","|Shift|~|m|o|d|u|l|o|Shift|#|1|3|Shift|#|4|Shift|Tab|Shift|Enter|Shift|~|m|o|d|u|l|o|Shift|#|9|Shift|#|4|Shift|Tab|Shift|Enter|Shift|~|m|o|d|u|l|e|Backspace|o|Shift|#|5|Shift|$|Backspace|Shift|#|4|Shift|Tab|Shift|Enter|Shift|~|m|o|d|l|Backspace|u|l|o|Shift|#|1|Shift|#|4|Shift|Tab|Shift|Enter|Shift|~|m|o|d|u|l|o|Shift|#|-|3|Shift|#|4|Shift|Tab|Shift|Enter"
"functions","math","multiplication","","","Complete test of multiplication, including mixing float and int types, multi-arg, one arg, no arg","functions_math_multiplication","|Shift|~|Shift|*|Shift|#|3|Shift|#|4|Shift|Tab|Shift|~|Shift|*|Shift|#|3|Shift|Tab|Shift|~|Shift|*|5|Backspace|Backspace|Shift|*|Shift|%|5|.|5|Shift|#|3|Shift|Tab|Shift|~|Shift|*|Shift|%|4|.|4|Shift|%|6|4|Backspace|.|4|Shift|Tab|Tab|Shift|Tab|Shift|~|Shift|*|Shift|#|3|Shift|#|3|Shift|#|3|Shift|#|3|Shift|Tab|Shift|~|Shift|*|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","negation","","","Tests use of the - operator as a unary operator that negates the argument - also tests the ""optional"" parameter type for builtins","functions_math_negation","|Shift|~|-|Shift|#|3|Shift|Tab|Shift|Enter|Shift|~|-|Shift|%|4|3|.|3|Shift|Tab|Shift|Enter"
"functions","math","roundfloorceil","","","What it says on the tin - tests round, floor, and ceil, each with a high fraction and a low fraction.","functions_math_roundfloorceil","|Shift|~|r|o|u|n|d|Shift|%|1|2|.|1|1|Shift|Tab|Shift|~|r|o|u|n|d|Shift|%|1|2|.|8|3|Shift|Tab|Shift|~|f|l|o|o|r|Shift|%|1|2|.|1|2|Shift|Tab|Shift|~|f|l|o|o|r|Shift|%|1|2|.|4|Backspace|7|5|Shift|Tab|Shift|~|c|e|i|l|i|n|g|Shift|%|1|2|.|1|2|Shift|Tab|Shift|~|c|e|i|l|i|n|g|Shift|%|1|2|.|8|5|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","math","subtraction","","","complete test of subtraction, including mixed types","functions_math_subtraction","|Shift|~|Shift|*|Shift|#|3|Shift|#|4|Shift|Tab|Shift|~|Shift|*|Shift|#|3|Shift|Tab|Shift|~|Shift|*|5|Backspace|Backspace|Shift|*|Shift|%|5|.|5|Shift|#|3|Shift|Tab|Shift|~|Shift|*|Shift|%|4|.|4|Shift|%|6|4|Backspace|.|4|Shift|Tab|Tab|Shift|Tab|Shift|~|Shift|*|Shift|#|3|Shift|#|3|Shift|#|3|Shift|#|3|Shift|Tab|Shift|~|Shift|*|ArrowUp|ArrowUp|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","string","cat","","","testing string-cat with one arg, no args, two args, three args.","functions_string_cat","|Shift|~|s|t|r|i|n|g|-|c|a|t|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|-|c|a|t|ArrowRight|Shift|~|s|t|r|i|n|g|-|c|a|t|Shift|$|Shift|Enter|h|e|l|Tab|Enter|Shift|$|Shift|Enter|l|o|0|Backspace|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|=|Backspace|-|c|a|t|Shift|$|Shift|Enter|h|Tab|Enter|Shift|$|Shift|Enter|e|l|Tab|Enter|Shift|$|Shift|Enter|l|o|Tab|Enter|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","string","charat","","","tests string-char-at, with a valid index that points to a character that is unique in the string, then with two other invocations, both of which are out of bounds in different ways (upper and lower bound), both causing error","functions_string_charat","|Shift|~|s|t|r|i|n|g|-|c|h|a|r|-|a|t|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|#|1|Shift|Tab|Shift|~|s|t|r|i|n|g|-|c|h|a|r|-|a|t|Tab|Shift|$|h|e|Backspace|Backspace|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|#|-|1|Shift|Tab|Shift|~|s|t|r|i|n|g|-|c|h|a|r|-|a|t|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|#|1|0|0|Shift|Tab|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","string","indexof","","","string index-of, several cases. 1. finds the one-char string 2. fdoesn't find a one-char string 3. finds a multi-char string 4. doesn't find a multi-char string that has a partial match with the string","functions_string_indexof","|Shift|~|s|t|r|i|n|g|-|i|n|d|e|x|-|o|f|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|$|Shift|Enter|e|Tab|Enter|Shift|Tab|Shift|~|d|Backspace|s|t|r|i|n|g|-|i|n|d|e|x|-|o|f|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|$|Shift|Enter|x|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|-|i|n|d|e|x|-|o|f|Shift|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|$|Shift|Enter|e|l|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|-|i|n|d|e|x|-|o|f|Tab|Shift|$|h|Backspace|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|$|Shift|Enter|o|p|e|Tab|Enter|Shift|Tab|ArrowUp|ArrowUp|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter|ArrowDown|Shift|Enter"
"functions","string","length","","","tests string-length, both with a real string and an empty string","functions_string_length","|Shift|~|s|t|r|i|n|g|-|l|e|n|g|t|h|Tab|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|Tab|Shift|~|s|t|r|i|n|g|-|l|e|n|g|t|h|Tab|Shift|$|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"functions","string","listify","","","test string-listify, which takes a string and breaks up into individual strings, one per letter, all inside a word. The test includes a space in the string, which needed some fixes to get it to render right.","functions_string_listify","|Shift|~|s|t|r|i|n|g|-|l|i|s|t|i|f|y|Tab|Shift|$|Shift|Enter|h|e|l|l|o| |t|h|e|r|e|.|Tab|Enter|Shift|Tab|Shift|Enter"
"functions","syscalls","applystyleto","","","Just tests the basic ability to set the style on something using apply-style-to. no error checking yet","functions_syscalls_applystyleto","|Shift|~|a|p|p|l|y|-|s|t|y|l|e|-|t|o|Tab|Shift|$|Shift|Enter|f|o|n|t|-|w|e|i|g|h|t|Shift|:|b|o|l|d|;|Tab|Enter|Shift|(|Shift|H|e|l|l|o|Shift|Tab|Tab|Shift|Enter"
"graphics","verticalcommand","","","","tests the visual styling of vertically-oriented commands and lambdas","graphics_verticalcommand","|Shift|~|Shift|+|Tab|Shift|#|Shift|#|#|#|Shift|Tab|Shift|~|Shift|+|Tab|Shift|#|#|#|2|3|4|3|4|2|3|4|2|3|4|2|3|4|Shift|Tab|Shift| |Shift|~|Backspace|Shift|&| |a| |b| |c| |d|Tab|Shift|#|#|#|#|#|#|Shift|Tab|Shift|&| |a| |b| |c| |d|Tab|Shift|#|#|#|#|#|Tab|Shift| "
"helloworld","test","","","","[none]","helloworld_test","[none]"
"integration","bindanduse","","","","A test that gotests a typical absolute value function, e.g. (if (< a 0) (- 0 a) a), to the symbol abs, then calling it again on both negative and positive numbers, to verify that lambdas work, commands work, binding works, and calling bound functions works.","integration_bindanduse","|Shift|~|b|i|n|d|Tab|Shift|@|a|b|s|Shift|&| |n|Tab|Shift|~|Shift|<|Backspace|i|f|Tab|Shift|~|Shift|<|Tab|Shift|@|n|Shift|#|Shift|Tab|Shift|~|-|Tab|Shift|#|Shift|@|n|Shift|Tab|Shift|@|n|Shift|Tab|Tab|Tab|Shift|Enter|Shift|~|a|b|s|Tab|Shift|#|1|0|0|Shift|Tab|Shift|Enter|Shift|~|a|b|s|Tab|Shift|#|-|1|0|0|Shift|Tab|Shift|Enter"
"keyvector","doc","tab","","","Tests the case when you type tab if a doc is selected (the top level doc, no children). No other tests here! maybe others should be here?","keyvector_doc_tab","|Tab"
"rendering","command","hidedocchildren","","","Test to make sure that doc children of a command (like letter, line, etc) are hidden in normal mode.","rendering_command_hidedocchildren","|Shift|H|e|l|l|o|Shift|~|Shift|(|t|h|e|r|e"
"saveload","bool","","","","standard test for saving and loading booleans -- both true and false, mixed with other data types","saveload_bool","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|(|Tab|Shift|!|!|y|Shift|#|3|Shift|!|Shift|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","commands","basic","","","Just saves and loads some basic commands.","saveload_commands_basic","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|~|b|a|s|i|c|Tab|Shift|~|c|o|m|m|a|n|d|s|Tab|Shift|#|Shift|Tab|Shift|~|a|r|e|Tab|Shift|~|f|u|n|Tab|Shift|!|y|Shift|Tab|Tab|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","doc","","","","basic saving and loading of a few nested doc objects.","saveload_doc","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|{|Tab|Shift|{|{|{|Shift|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","docwithcontents","","","","The previous doc save/load test didn't test a doc that had any text in it. There were a few bugs: letters and separators weren't being parsed correctly during load, and there was no handling of newlines - so this test covers those cases now.","saveload_docwithcontents","|Shift|~|s|a|v|e|Shift|@|t|Shift|{|Shift|H|e|l|l|o| |t|h|e|r|e|Enter|f|o|l|k|s|Shift|Tab|Tab|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","error","basic","","","basic saving and loading of error output","saveload_error_basic","|Shift|~|-|Backspace|s|a|v|e|Tab|Shift|@|t|Shift|~|s|a|v|e|Shift|Enter|Shift|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","expectation","","","","tests saving/loading of expectations","saveload_expectation","|Shift|~|s|a|v|e|Shift|@|t|Shift|*|Shift|*|Shift|#|Shift|Tab|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","integer","zero","","","A test where I just save and load an integer that is zero, but I make sure not to explicitly type zero. Integers default to being zero if they have no internal value, but we want to make sure we save that out as a zero and not an empty string.","saveload_integer_zero","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|#|Shift|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","integer","","","","tests basic saving and loading of an integer. this requires toString and parsing so there will need to be tests for each type.","saveload_integer","|Shift|~|s|a|v|e|Tab|Shift|@|t|e|s|t|s|f|Backspace|a|f|Backspace|v|e|f|i|l|e|Shift|#|2|0|Shift|Tab|Shift|~|l|o|a|d|Tab|Shift|@|t|e|s|t|s|a|v|e|f|i|l|e|Shift|Tab|ArrowUp|Shift|Enter|ArrowDown|Shift|Enter"
"saveload","lambda","basic","","","saving and loading of a simple lambda with spaces in the name (which need to be escaped)","saveload_lambda_basic","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|&|l|Backspace| |a| |b| |c|Tab|Shift|#|3|Shift|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","nil","","","","simple test to make sure you can save and load a nil.","saveload_nil","|Shift|~|s|a|v|e|Shift|@|t|Shift|^|Shift|Tab|Shift|Enter|Shift|~|l|a|d|Backspace|Backspace|o|a|d|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","preservevertical","","","","tests saving and loading a set of random commands, with the goal of making sure that if you save something that's in vertical orientation, it's restored in vertical orientation","saveload_preservevertical","|Shift|~|s|a|v|e|Shift|@|t|Shift|~|a|b|c|Shift| |Shift|~|d|e|f|Shift|#|Shift|#|Shift|Tab|Shift|~|g|h|i|Shift|Tab|Tab|Shift|Enter|Shift|~|l|o|a|d|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","string","basicwithescapes","","","saves and loads strings with escaped quote chars","saveload_string_basicwithescapes","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|$|Shift|Enter|Shift|I| |a|m| |Shift|""| |i|n|g| |a|n|d| |Shift|""| |i|n|g|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"saveload","symbol","basic","","","basic saving and loading of symbol, w/ allowed special chars (- and _)","saveload_symbol_basic","|Shift|~|s|a|v|e|Tab|Shift|@|t|Shift|@|h|e|l|l|o|-|Shift|_|a|Shift|Tab|Shift|Enter|Shift|~|l|o|a|d|Tab|Shift|@|t|Shift|Tab|Shift|Enter"
"tags","commandtypes","display","","","Tests display of tags in commands, lambdas, and expectations, both horizontal and verticalNOTE ON THIS TESTI commented out the second part of the test because it was testing step eval,which is broken and needs to be rewritten from the ground up.So there may be some weird things in the golden that seem unrelated to this test.|Shift|~|a|d|d|-|t|a|g|Shift|~|Shift|+|Shift|#|3|Shift|#|3|Shift|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|v|Shift| |Shift|&|Backspace|Shift|~|a|d|d|-|t|a|g|Shift|&| |n|Shift|~|Shift|+|Shift|@|n|Shift|@|n|Shift|Tab|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|v|Shift| |Shift|~|b|i|n|d|Shift|@|m|Shift|#|3|Shift|Tab|Shift|Enter|Shift|~|Shift|+|Shift|@|m|Shift|@|m|Shift|Tab|Meta|Enter|Enter|Tab|Tab|Meta|c|Shift|Tab|Tab|ArrowRight|Shift|~|a|d|d|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter","tags_commandtypes_display","[none]"
"tags","doctypes","display","","","Verifies that tags are displayed in all doc-type nexes (words, letters, etc)","tags_doctypes_display","|Shift|~|a|d|d|-|t|a|g|Tab|m|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|ArrowRight|Shift|~|a|d|d|-|t|a|g|Shift|(|h|e|l|l|o|Shift|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|ArrowRight|Shift|~|a|d|d|-|t|a|g|Tab|[|Shift|H|e|l|l|o|Shift|Tab|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|Backspace|Shift|Tab|ArrowRight|Shift|~|a|d|d|-|t|a|g|Tab|Shift|{|h|e|l|l|o| |t|h|e|r|e|Shift|Tab|Tab|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|ArrowRight|Shift|{|h|e|l|l|o| |t|h|e|r|e|ArrowLeft|ArrowLeft|ArrowLeft|ArrowLeft|ArrowLeft|Meta|c|Shift|Tab|Tab|ArrowRight|Shift|~|h|e|l|Backspace|Backspace|Backspace|a|d|d|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|h|e|l|l|o|t|h|e|r|e|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter"
"tags","valuenex","display","","","adds tags to each type of valuenex, to verify that they all support displaying tags.","tags_valuenex_display","|Shift|~|a|d|d|-|t|a|g|Shift|!|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|a|d|d|-|t|a|g|Shift|$|Shift|Enter|p|h|i|l|c|o|l|l|i|n|s|Tab|Enter|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|a|d|d|-|t|a|g|Shift|@|b|a|z|q|u|x|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|Shift|%|Backspace|a|Backspace|Backspace|a|d|d|-|t|a|g|Shift|%|3|4|3|.|5|3|Shift|$|Shift|Enter|o|Backspace|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|a|d|d|-|t|a|g|Shift|#|1|0|0|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|a|d|d|-|t|a|g|Shift|^|Shift|$|Shift|Enter|f|o|o|b|a|r|Tab|Enter|Shift|Tab|Shift|Enter|Shift|~|a|d|d|-|t|a|g|Shift|Backspace"
"tags","word","complete","","","full test of adding, removing, double-adding, multiple tags, and the has-tag test on a word with some letters in it.","tags_word_complete","|Shift|~|a|d|d|-|a|Backspace|t|a|g|Shift|(|h|e|l|l|o|Shift|Tab|ArrowRight|Shift|$|Shift|Enter|f|o|o|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|Shift|~|a|d|d|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|Shift|~|r|e|m|o|v|e|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|h|e|l|l|o|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|Shift|~|h|Backspace|a|d|d|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|f|o|o|Tab|Enter|Shift|Tab|Shift|Enter|Meta|c|Shift|~|h|a|s|-|t|a|g|Tab|Meta|v|ArrowRight|Shift|$|Shift|Enter|f|o|o|Tab|Enter|Shift|Tab|Shift|Enter"
