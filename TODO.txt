
- use shift keydown followed immediately by shift keyup as indication that we are switching
- insert mode
- default insert mode is the most common one

atoms inserting atom
insert after
insert before

atoms inserting list:
insert after
insert before
insert around

empty lists, inserting list
insert inside
insert after
insert before
insert around

empty lists, inserting atom
insert inside
insert after
insert before

full lists, inserting atom
insert after
insert before
insert around
insert as first element



NEW TO-DOs AFTER TRYING THE NEW VERSION OUT
- need a "command alias" function so I can easily rename/alias commands without writing new tests
- I actually do think I will need a form of ~import that has callbacks
- "ff" should just be "start"


ASYNC/EXPECTATION TO DO:
- make more specific param code for expectations so you can specify that a given expectation param must be activated, must have an ffwith, must be set, etc.
- reference counting doesn't work in the sense that if you delete an expectation containing other ones, it keeps firing...? because of the stale reference in the pendingExpectations, probably...


TYPE-RELATED TO DO
- figure out how to resolve orgs with multiple matching tags (first match?) and do we iterate first thru the tags in the expr being evaluated or first thru the tags on the org?
- figure out if it's an error if returned org doesn't have tag
- contract adherence check at tag assignment time with the tag builtin
- builtin that checks contract adherence
- implement tag checking in function params (single bracket [])
- implement tag checking WITH contract adherence (double bracket) 
- functions that return nothing (i.e. \?) - remove themselves from parent
- functions that return multiple values - put all in parent
- "do not eval" functions that always act like they are quoted the first time [8/15/20 what did I mean by this?]
- make it so braces inside tags are ignored [stuff in here]
- contracts that need to be implemented
- - equality
- - lambda type - exact match
- - lambda type - "invokable" (i.e. matches if less specific than, can be called on same args)
- - list-must-contain-exclusively: must contain given tags (or types) and no other tags (or types)
- - list-must-contain-nonexclusively: must contain given tags (or types), can have others
- - summary: something with tag Foo must have tags Bar, Baz, Qux
- - custom (runs code to see if nex satisifies)
(see CHANGEBLOG.txt for more info)

GENERAL TESTS TO-DO (see spreadsheet for to-do info on individual tests)
- all tests may need to be re-recorded
- re-do tests for builtins using unit testing framework
- I should have a test for each type of error location to make sure error propagation doesn't get broken. so basically any place that evaluateNexSafely is called

SERVER/FILES TO DO
- saving a file with an error in it only saves the top-level error not the enclosed errors.
- implement authentication/usernames/something and make it so each user saves/loads files from their private location
- make it so library files like util-functions, etc., are loaded from a global place that can't be modified, but that if you've done git pull and are modifying the source, there's a way you can pass a flag or something so that those files CAN be modified
- change the import builtin so it's like "import util" instead of "import util-functions"
- come up with a file extension for files and automatically add it on the server side
- make a pretty-printer util for nex files so they can be processed to be easier to look at in a text editor
- think of a way to reasonably save closures, including saving their memory/lexical env
- server doesn't crash anymore when you load a file that isn't there but still need to improve error reporting.

RENDERING TO-DO
- handle insertion points at the render node level
- get rid of that carriage return object and use insertion point for that
- implement the thing where instead of having various types of renders, you just mark whatever is dirty as dirty, then call a function that renders whatever's dirty
- (maybe already does this) do "in place" rendering rather than deleting innerHTML and re-rendering (needs nexes to have three rendering functions - pre-render for dom nodes that precede children, actual render which draws children, and post-render for dom nodes that come after children)
- make certain visual things like width/height cachable in the nex itself so that builtins like get-width can just retrieve it rather than having to re-render the nex to find out its width
- make tags precede content for lists, come after content for atoms

EVALUATION ENGINE TO-DO:
- (maybe already does this) make it so that closures can, depending on flags/options, copy the contents of a lambda when created, so that you can change the contents of any lambda expressions without changing the code that any outstanding closures will run (need to see if this is a performance hit)

CODE CLEANUP TO-DO
- make a better naming convention for js global variables
- fix render node hacks in estring class coming from the normal/expanded drawing logic
- remove dead code from eerror class because it can't be drawn in expanded mode anymore
- BuiltinArgEvaluator can just be called ArgEvaluator
- when I made the render node class I just copied all the methods from NexContainer, but because js isn't type safe, these should be renamed to something different so I can at least grep for them
- port to typescript?

BUILTIN TO-DO
- make a builtin to convert a closure to a lambda (it would really retrieve the lambda)
- figure out what to do in run-js if no DOM object (throw exception? create one?)
- figure out whether I should use exclamation point for primitives that change the value of things (like set!) as in regular lisp
- short circuit evaluation for conditionals
- implement cond
- implement to-word for lines and docs
- implement "equal" for list types (needs to be deep equal)

USER INPUT TO DO
- use regexes in the event table
- make "editor" classes for symbol, string, etc., similar to tags
- figure out key combination for "reopening editor"
- fix problems with undo
- editor for command is especially impt because it's diff from lambda now
- figure out what actually happens with lambdas that have incorrectly specified args (make it so the editor will not allow you to input incorrect args?)
- make it so that the "package" command SAVES the package file and runs it. However when you use "import" it looks to see if the top level element in the loaded file is a package. If it's not, it's an error, otherwise it runs the package but suppresses the part where it saves it
(maybe by just appending an optional param or something before evaluating it)

PERFORMANCE TO DO
- instanceof checks are slow, for nexes instead compare to getTypeName()
- var is slow, use const or let
- rendering is slow (see rendering section)

CUSTOM NEXES
- make it so orgs can be oriented vert or horiz
- make doc/line/word into custom nexes ("subclasses" of org)
- - for doc type, make it so that you can type things like an exclaimation point without it inserting a boolean
- make custom nexes to implement sound/audio

EXPERIMENTAL
- make a list type that, when you evaluate it, replaces each of its children with the result of evaluating that child
- hook up playstation controller and try coding with it
- try voice commands
- make arithmetic functions use the typed words 'plus', 'minus' instead of +/- symbols
- try having different ctrl/alt/shift chords for insert/append/prepend/enclose versions of !@#$
- get rid of insertion points





